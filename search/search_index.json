{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"vscode-ext Create vscode extensions and color themes with python. Why use this? Why should you use this for building VScode extensions when you can use typescript? Here are some reasons: vscode-ext builds the package.json for you! No need to switch between your extension.py and package.json in order to add commands. It also handles adding Activity Bars, Keybinds and Views. vscode-ext provides a more pythonic way of creating the extension. Python also has some powerful modules that Javascript doesn't and you can include these with vscode-ext vscode-ext extensions work perfectly with vsce and you can publish your extensions just like you would publish any other extension. Extensions built using vscode-ext Here's a list of some extensions built using vscode-ext. If you'd like to include your extension here feel free to create a PR. Youtube Wikipedia Internet Search Virtual Assistant","title":"Overview"},{"location":"#vscode-ext","text":"Create vscode extensions and color themes with python.","title":"vscode-ext"},{"location":"#why-use-this","text":"Why should you use this for building VScode extensions when you can use typescript? Here are some reasons: vscode-ext builds the package.json for you! No need to switch between your extension.py and package.json in order to add commands. It also handles adding Activity Bars, Keybinds and Views. vscode-ext provides a more pythonic way of creating the extension. Python also has some powerful modules that Javascript doesn't and you can include these with vscode-ext vscode-ext extensions work perfectly with vsce and you can publish your extensions just like you would publish any other extension.","title":"Why use this?"},{"location":"#extensions-built-using-vscode-ext","text":"Here's a list of some extensions built using vscode-ext. If you'd like to include your extension here feel free to create a PR. Youtube Wikipedia Internet Search Virtual Assistant","title":"Extensions built using vscode-ext"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . [1.5.4] Fixed No errors being logged when there is an error in the js file. ActiveTextEditor raising error instead of undefined Deprecated vscode.ext has now been deprecated and will be removed by 1.6.0, all of the ext functions/classes can now be accessed through vscode directly. [1.5.3] - 2021-08-01 Added vscode.window.show_text_document context managers with vscode.window.set_status_bar_message [1.5.2] - 2021-07-31 Added This CHANGELOG file Workspace Configurations Documentation Fixed main.js not being included in packages","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#154","text":"","title":"[1.5.4]"},{"location":"changelog/#fixed","text":"No errors being logged when there is an error in the js file. ActiveTextEditor raising error instead of undefined","title":"Fixed"},{"location":"changelog/#deprecated","text":"vscode.ext has now been deprecated and will be removed by 1.6.0, all of the ext functions/classes can now be accessed through vscode directly.","title":"Deprecated"},{"location":"changelog/#153-2021-08-01","text":"","title":"[1.5.3] - 2021-08-01"},{"location":"changelog/#added","text":"vscode.window.show_text_document context managers with vscode.window.set_status_bar_message","title":"Added"},{"location":"changelog/#152-2021-07-31","text":"","title":"[1.5.2] - 2021-07-31"},{"location":"changelog/#added_1","text":"This CHANGELOG file Workspace Configurations Documentation","title":"Added"},{"location":"changelog/#fixed_1","text":"main.js not being included in packages","title":"Fixed"},{"location":"color-theme/","text":"Guide Step 1 Create a python file inside a directory. Step 2 Write some code which includes configuration for your color theme. Take a look at this for reference. Step 3 Build your theme. Run python theme.py in your terminal (replace theme.py with filename). Step 4 Test it. Press F5 to enter Development Mode and test your theme. Preview","title":"Creating a color theme"},{"location":"color-theme/#guide","text":"","title":"Guide"},{"location":"color-theme/#step-1","text":"Create a python file inside a directory.","title":"Step 1"},{"location":"color-theme/#step-2","text":"Write some code which includes configuration for your color theme. Take a look at this for reference.","title":"Step 2"},{"location":"color-theme/#step-3","text":"Build your theme. Run python theme.py in your terminal (replace theme.py with filename).","title":"Step 3"},{"location":"color-theme/#step-4","text":"Test it. Press F5 to enter Development Mode and test your theme.","title":"Step 4"},{"location":"color-theme/#preview","text":"","title":"Preview"},{"location":"creating-your-extension/","text":"Guide Step 1 Create a python file inside a folder. Step 2 Write the code for your extension. For this guide we have used the Example Extension Step 3 Run the python file. It will build the files. Step 4 Press F5. This will run the extension and open a new vscode window in development mode. Step 5 Finally, test your command. Open the command palette with Ctrl+P in the development window. Type >Hello World It should show a popup like this in the bottom right corner Example Extension import vscode ext = vscode . Extension ( name = \"testpy\" , display_name = \"Test Py\" , version = \"0.0.1\" ) @ext . event def on_activate (): return f \"The Extension ' { ext . name } ' has started\" @ext . command () def hello_world (): vscode . window . show_info_message ( f 'Hello World from { ext . name } ' ) @ext . command ( keybind = \"ALT+5\" ) def ask_question (): res = vscode . window . show_info_message ( 'How are you?' , 'Great' , 'Meh' ) if res == \"Great\" : vscode . window . show_info_message ( 'Woah nice!!' ) elif res == \"Meh\" : vscode . window . show_info_message ( 'Sorry to hear that :(' ) vscode . build ( ext )","title":"Creating your first extension"},{"location":"creating-your-extension/#guide","text":"","title":"Guide"},{"location":"creating-your-extension/#step-1","text":"Create a python file inside a folder.","title":"Step 1"},{"location":"creating-your-extension/#step-2","text":"Write the code for your extension. For this guide we have used the Example Extension","title":"Step 2"},{"location":"creating-your-extension/#step-3","text":"Run the python file. It will build the files.","title":"Step 3"},{"location":"creating-your-extension/#step-4","text":"Press F5. This will run the extension and open a new vscode window in development mode.","title":"Step 4"},{"location":"creating-your-extension/#step-5","text":"Finally, test your command. Open the command palette with Ctrl+P in the development window. Type >Hello World It should show a popup like this in the bottom right corner","title":"Step 5"},{"location":"creating-your-extension/#example-extension","text":"import vscode ext = vscode . Extension ( name = \"testpy\" , display_name = \"Test Py\" , version = \"0.0.1\" ) @ext . event def on_activate (): return f \"The Extension ' { ext . name } ' has started\" @ext . command () def hello_world (): vscode . window . show_info_message ( f 'Hello World from { ext . name } ' ) @ext . command ( keybind = \"ALT+5\" ) def ask_question (): res = vscode . window . show_info_message ( 'How are you?' , 'Great' , 'Meh' ) if res == \"Great\" : vscode . window . show_info_message ( 'Woah nice!!' ) elif res == \"Meh\" : vscode . window . show_info_message ( 'Sorry to hear that :(' ) vscode . build ( ext )","title":"Example Extension"},{"location":"getting-started/","text":"with pip recommended The latest stable release of vscode-ext can be installed with pip : pip install vscode-ext However if you want the latest working version from github you can: pip install git+https://github.com/codewithswastik/vscode-ext.git with git vscode-ext can be directly used from GitHub by cloning the repository which might be useful if you want to use the working version: git clone https://github.com/codewithswastik/vscode-ext.git","title":"Installation"},{"location":"getting-started/#with-pip-recommended","text":"The latest stable release of vscode-ext can be installed with pip : pip install vscode-ext However if you want the latest working version from github you can: pip install git+https://github.com/codewithswastik/vscode-ext.git","title":"with pip recommended"},{"location":"getting-started/#with-git","text":"vscode-ext can be directly used from GitHub by cloning the repository which might be useful if you want to use the working version: git clone https://github.com/codewithswastik/vscode-ext.git","title":"with git"},{"location":"publish-your-extension/","text":"Publishing Extensions In order to publish your extension created with vscode-ext you should build your extension with the publish flag as follows: vscode . build ( ext , publish = True ) This will generate the README.md and CHANGELOG.md for your extension. It's important to keep these updated. It will also create the .vscodeignore file. The contents of this file will be removed from being packaged in your extension. After this you have to follow the steps mentioned in the official documentation for publishing extensions.","title":"Publishing your extension"},{"location":"publish-your-extension/#publishing-extensions","text":"In order to publish your extension created with vscode-ext you should build your extension with the publish flag as follows: vscode . build ( ext , publish = True ) This will generate the README.md and CHANGELOG.md for your extension. It's important to keep these updated. It will also create the .vscodeignore file. The contents of this file will be removed from being packaged in your extension. After this you have to follow the steps mentioned in the official documentation for publishing extensions.","title":"Publishing Extensions"},{"location":"documentation/command/","text":"Command A class that implements the protocol for commands that can be used via the command palette. These should not be created manually, instead they should be created via the decorator or functional interface. __init__ ( self , name , func , title = None , category = None , keybind = None , when = None ) special Initialize a command. Parameters: Name Type Description Default name str The internal name of the command. required func Callable The function to register as a command. required title Optional[str] The title of the command. This is shown in the command palette. None category Optional[str] The category that this command belongs to. None keybind Optional[str] The keybind for this command. None when Optional[str] A condition for when keybinds should be functional. None extension ( self , ext_name ) The string representation for an extension.","title":"Command"},{"location":"documentation/command/#command","text":"A class that implements the protocol for commands that can be used via the command palette. These should not be created manually, instead they should be created via the decorator or functional interface.","title":"Command"},{"location":"documentation/command/#vscode.extension.Command.__init__","text":"Initialize a command. Parameters: Name Type Description Default name str The internal name of the command. required func Callable The function to register as a command. required title Optional[str] The title of the command. This is shown in the command palette. None category Optional[str] The category that this command belongs to. None keybind Optional[str] The keybind for this command. None when Optional[str] A condition for when keybinds should be functional. None","title":"__init__()"},{"location":"documentation/command/#vscode.extension.Command.extension","text":"The string representation for an extension.","title":"extension()"},{"location":"documentation/config/","text":"Example Code import vscode from vscode.config import Config c = Config ( name = 'Say' , description = 'Say Something!' , input_type = str , default = \"Hello World!\" ) ext = vscode . Extension ( 'speaker' , 'Speaker' , '0.0.1' , config = [ c ]) @ext . command () def message_say_config (): vscode . window . show_info_message ( ext . get_config ( 'Say' ) or c . default ) vscode . build ( ext ) Result Workspace Configurations ConfigType An enumeration.","title":"Configuration"},{"location":"documentation/config/#example","text":"","title":"Example"},{"location":"documentation/config/#code","text":"import vscode from vscode.config import Config c = Config ( name = 'Say' , description = 'Say Something!' , input_type = str , default = \"Hello World!\" ) ext = vscode . Extension ( 'speaker' , 'Speaker' , '0.0.1' , config = [ c ]) @ext . command () def message_say_config (): vscode . window . show_info_message ( ext . get_config ( 'Say' ) or c . default ) vscode . build ( ext )","title":"Code"},{"location":"documentation/config/#result","text":"","title":"Result"},{"location":"documentation/config/#workspace-configurations","text":"","title":"Workspace Configurations"},{"location":"documentation/config/#vscode.config.ConfigType","text":"An enumeration.","title":"ConfigType"},{"location":"documentation/extension/","text":"Extension Represents a vscode extension. A number of options can be passed to the Extension . __init__ ( self , name , display_name , version , description = None , config = [], icon = None , publisher = None , repository = None ) special Initialize the extension. Note There must be no spaces in the extension name. Parameters: Name Type Description Default name str The name of the extension. required display_name str The display name of the extension. This will be shown in the marketplace and to the user. required version str The version of the extension. config: a list of Config classes for the extension. required icon Optional[str] The icon for the extension. None publisher Optional[str] The name of the publisher of this extension. None repository Optional[dict] The repository of this extension. This can be set with set_repository None Exceptions: Type Description ValueError If name has spaces. command ( self , name = None , title = None , category = None , keybind = None , when = None ) A decorator for registering commands. Parameters: Name Type Description Default name Optional[str] The internal name of the command. None title Optional[str] The title of the command. This is shown in the command palette. None category Optional[str] The category that this command belongs to. Default categories set by Extensions will be overriden if this is not None. False should be passed in order to override a default category. None keybind Optional[str] The keybind for this command. None when Optional[str] A condition for when keybinds should be functional. None event ( self , func ) A decorator for registering event handlers. get_config ( self , target ) A method to get a configuration key. register_command ( self , func , name = None , title = None , category = None , keybind = None , when = None ) Register a command. This is usually not called, instead the command() shortcut decorators should be used instead. Parameters: Name Type Description Default func Callable The function to register as a command. required name Optional[str] The internal name of the command. None title Optional[str] The title of the command. This is shown in the command palette. None category Optional[str] The category that this command belongs to. Default categories set by Extensions will be overriden if this is not None. False should be passed in order to override a default category. None keybind Optional[str] The keybind for this command. None when Optional[str] A condition for when keybinds should be functional. None register_keybind ( self , command ) A method called internally to register a keybind. set_activity_bar ( self , activity_bar , webview = None ) Set an activity bar. set_default_category ( self , category ) Set a default category for new commands. Parameters: Name Type Description Default category The name of the default category. required set_repository ( self , url , repo_type = 'git' ) A method to set a repository for the Extension. Parameters: Name Type Description Default url str The repository url. required repo_type str The type of the repository. 'git'","title":"Extension"},{"location":"documentation/extension/#extension","text":"Represents a vscode extension. A number of options can be passed to the Extension .","title":"Extension"},{"location":"documentation/extension/#vscode.extension.Extension.__init__","text":"Initialize the extension. Note There must be no spaces in the extension name. Parameters: Name Type Description Default name str The name of the extension. required display_name str The display name of the extension. This will be shown in the marketplace and to the user. required version str The version of the extension. config: a list of Config classes for the extension. required icon Optional[str] The icon for the extension. None publisher Optional[str] The name of the publisher of this extension. None repository Optional[dict] The repository of this extension. This can be set with set_repository None Exceptions: Type Description ValueError If name has spaces.","title":"__init__()"},{"location":"documentation/extension/#vscode.extension.Extension.command","text":"A decorator for registering commands. Parameters: Name Type Description Default name Optional[str] The internal name of the command. None title Optional[str] The title of the command. This is shown in the command palette. None category Optional[str] The category that this command belongs to. Default categories set by Extensions will be overriden if this is not None. False should be passed in order to override a default category. None keybind Optional[str] The keybind for this command. None when Optional[str] A condition for when keybinds should be functional. None","title":"command()"},{"location":"documentation/extension/#vscode.extension.Extension.event","text":"A decorator for registering event handlers.","title":"event()"},{"location":"documentation/extension/#vscode.extension.Extension.get_config","text":"A method to get a configuration key.","title":"get_config()"},{"location":"documentation/extension/#vscode.extension.Extension.register_command","text":"Register a command. This is usually not called, instead the command() shortcut decorators should be used instead. Parameters: Name Type Description Default func Callable The function to register as a command. required name Optional[str] The internal name of the command. None title Optional[str] The title of the command. This is shown in the command palette. None category Optional[str] The category that this command belongs to. Default categories set by Extensions will be overriden if this is not None. False should be passed in order to override a default category. None keybind Optional[str] The keybind for this command. None when Optional[str] A condition for when keybinds should be functional. None","title":"register_command()"},{"location":"documentation/extension/#vscode.extension.Extension.register_keybind","text":"A method called internally to register a keybind.","title":"register_keybind()"},{"location":"documentation/extension/#vscode.extension.Extension.set_activity_bar","text":"Set an activity bar.","title":"set_activity_bar()"},{"location":"documentation/extension/#vscode.extension.Extension.set_default_category","text":"Set a default category for new commands. Parameters: Name Type Description Default category The name of the default category. required","title":"set_default_category()"},{"location":"documentation/extension/#vscode.extension.Extension.set_repository","text":"A method to set a repository for the Extension. Parameters: Name Type Description Default url str The repository url. required repo_type str The type of the repository. 'git'","title":"set_repository()"},{"location":"documentation/types/","text":"ActivityBar Content settings for the activity bar. __init__ ( self , id , title , icon ) special Parameters: Name Type Description Default id str The unique id of the activity bar. required title str The title shown to the user. required icon str The icon of the activity bar. required Disposable Represents a type which can release resources, such as event listening or a timer. InputBoxOptions Options to configure the behavior of the input box UI. __init__ ( self , title = None , password = None , ignore_focus_out = None , prompt = None , place_holder = None , value = None ) special Parameters: Name Type Description Default title Optional[str] An optional string that represents the title of the input box. None password Optional[bool] Controls if a password input is shown. Password input hides the typed text. None ignore_focus_out Optional[bool] Set to True to keep the input box open when focus moves to another part of the editor or to another window. This setting is ignored on iPad and is always False. None place_holder Optional[str] An optional string to show as placeholder in the input box to guide the user what to type. None prompt Optional[str] The text to display underneath the input box. None value Optional[str] The value to prefill in the input box. None OpenDialogOptions Options to configure the behaviour of a file open dialog. Note On Windows and Linux, a file dialog cannot be both a file selector and a folder selector, so if you set both canSelectFiles and canSelectFolders to true on these platforms, a folder selector will be shown. Explicitly setting can_select_files and can_select_folders to false is futile and the editor then silently adjusts the options to select files. Position Represents a line and character position, such as the position of the cursor. QuickPickItem Represents an item that can be selected from a list of items. QuickPickOptions Options to configure the behavior of the quick pick UI. __init__ ( self , title = None , can_pick_many = None , ignore_focus_out = None , match_on_description = None , place_holder = None , match_on_detail = None ) special Parameters: Name Type Description Default title Optional[str] An optional string that represents the title of the quick pick. None can_pick_many Optional[bool] An optional flag to make the picker accept multiple selections, if true the result is an array of picks. None ignore_focus_out Optional[bool] Set to True to keep the input box open when focus moves to another part of the editor or to another window. This setting is ignored on iPad and is always False. None place_holder Optional[str] An optional string to show as placeholder in the input box to guide the user what to type. None match_on_description Optional[bool] An optional flag to include the description when filtering the picks. None match_on_detail Optional[bool] An optional flag to include the detail when filtering the picks. None Range A range represents an ordered pair of two positions. It is guaranteed that start.isBeforeOrEqual(end) SaveDialogOptions Options to configure the behaviour of a file save dialog. Selection Represents a text selection in an editor. TextDocument Represents a text document, such as a source file. Text documents have lines and knowledge about an underlying resource like a file. get_text ( self , location = None ) Get the text of this document. A substring can be retrieved by providing a range. The range will be adjusted. line_at ( self , location ) Returns a text line denoted by the line number or Position. Note that the returned object is not live and changes to the document are not reflected. Note: If location.line > TextDocument.line_count, the last line will be returned. TextDocumentShowOptions Represents options to configure the behavior of showing a document in an editor. TextLine Represents a line of text, such as a line of source code. TextLine objects are immutable. When a document changes, previously retrieved lines will not represent the latest state. ViewColumn An enumeration.","title":"Types"},{"location":"documentation/types/#vscode.types.ActivityBar","text":"Content settings for the activity bar.","title":"ActivityBar"},{"location":"documentation/types/#vscode.types.ActivityBar.__init__","text":"Parameters: Name Type Description Default id str The unique id of the activity bar. required title str The title shown to the user. required icon str The icon of the activity bar. required","title":"__init__()"},{"location":"documentation/types/#vscode.types.Disposable","text":"Represents a type which can release resources, such as event listening or a timer.","title":"Disposable"},{"location":"documentation/types/#vscode.types.InputBoxOptions","text":"Options to configure the behavior of the input box UI.","title":"InputBoxOptions"},{"location":"documentation/types/#vscode.types.InputBoxOptions.__init__","text":"Parameters: Name Type Description Default title Optional[str] An optional string that represents the title of the input box. None password Optional[bool] Controls if a password input is shown. Password input hides the typed text. None ignore_focus_out Optional[bool] Set to True to keep the input box open when focus moves to another part of the editor or to another window. This setting is ignored on iPad and is always False. None place_holder Optional[str] An optional string to show as placeholder in the input box to guide the user what to type. None prompt Optional[str] The text to display underneath the input box. None value Optional[str] The value to prefill in the input box. None","title":"__init__()"},{"location":"documentation/types/#vscode.types.OpenDialogOptions","text":"Options to configure the behaviour of a file open dialog. Note On Windows and Linux, a file dialog cannot be both a file selector and a folder selector, so if you set both canSelectFiles and canSelectFolders to true on these platforms, a folder selector will be shown. Explicitly setting can_select_files and can_select_folders to false is futile and the editor then silently adjusts the options to select files.","title":"OpenDialogOptions"},{"location":"documentation/types/#vscode.types.Position","text":"Represents a line and character position, such as the position of the cursor.","title":"Position"},{"location":"documentation/types/#vscode.types.QuickPickItem","text":"Represents an item that can be selected from a list of items.","title":"QuickPickItem"},{"location":"documentation/types/#vscode.types.QuickPickOptions","text":"Options to configure the behavior of the quick pick UI.","title":"QuickPickOptions"},{"location":"documentation/types/#vscode.types.QuickPickOptions.__init__","text":"Parameters: Name Type Description Default title Optional[str] An optional string that represents the title of the quick pick. None can_pick_many Optional[bool] An optional flag to make the picker accept multiple selections, if true the result is an array of picks. None ignore_focus_out Optional[bool] Set to True to keep the input box open when focus moves to another part of the editor or to another window. This setting is ignored on iPad and is always False. None place_holder Optional[str] An optional string to show as placeholder in the input box to guide the user what to type. None match_on_description Optional[bool] An optional flag to include the description when filtering the picks. None match_on_detail Optional[bool] An optional flag to include the detail when filtering the picks. None","title":"__init__()"},{"location":"documentation/types/#vscode.types.Range","text":"A range represents an ordered pair of two positions. It is guaranteed that start.isBeforeOrEqual(end)","title":"Range"},{"location":"documentation/types/#vscode.types.SaveDialogOptions","text":"Options to configure the behaviour of a file save dialog.","title":"SaveDialogOptions"},{"location":"documentation/types/#vscode.types.Selection","text":"Represents a text selection in an editor.","title":"Selection"},{"location":"documentation/types/#vscode.types.TextDocument","text":"Represents a text document, such as a source file. Text documents have lines and knowledge about an underlying resource like a file.","title":"TextDocument"},{"location":"documentation/types/#vscode.types.TextDocument.get_text","text":"Get the text of this document. A substring can be retrieved by providing a range. The range will be adjusted.","title":"get_text()"},{"location":"documentation/types/#vscode.types.TextDocument.line_at","text":"Returns a text line denoted by the line number or Position. Note that the returned object is not live and changes to the document are not reflected. Note: If location.line > TextDocument.line_count, the last line will be returned.","title":"line_at()"},{"location":"documentation/types/#vscode.types.TextDocumentShowOptions","text":"Represents options to configure the behavior of showing a document in an editor.","title":"TextDocumentShowOptions"},{"location":"documentation/types/#vscode.types.TextLine","text":"Represents a line of text, such as a line of source code. TextLine objects are immutable. When a document changes, previously retrieved lines will not represent the latest state.","title":"TextLine"},{"location":"documentation/types/#vscode.types.ViewColumn","text":"An enumeration.","title":"ViewColumn"},{"location":"documentation/window/","text":"ActiveTextEditor The currently active editor or undefined. The active editor is the one that currently has focus or, when none has focus, the one that has changed input most recently. TextEditor cursor : Position property readonly The cursor position of the 1st selection. delete ( self , location ) Delete a certain text region. insert ( self , location , value ) Insert text at a location. You can use \\r\\n or \\n in value and they will be normalized to the current document. replace ( self , location , value ) Replace a certain text region with a new value. You can use \\r\\n or \\n in value and they will be normalized to the current document. set_status_bar_message ( text , hide_after_timeout = None ) Set a message to the status bar. Note that status bar messages stack and that they must be disposed when no longer used. hide_after_timeout: Timeout in seconds after which the message will be auto disposed. show_error_message ( text , * args ) Show an error message. show_info_message ( text , * args ) Show an information message. show_input_box ( options = None ) Opens an input box to ask the user for input. The returned value will be undefined if the input box was canceled (e.g. pressing ESC). Otherwise the returned value will be the string typed by the user or an empty string if the user did not type anything but dismissed the input box with OK. show_quick_pick ( items , options = None ) Shows a selection list allowing multiple selections. Returns either the selected items or undefined. show_warn_message ( text , * args ) Show a warning message.","title":"Window"},{"location":"documentation/window/#vscode.window.ActiveTextEditor","text":"The currently active editor or undefined. The active editor is the one that currently has focus or, when none has focus, the one that has changed input most recently.","title":"ActiveTextEditor"},{"location":"documentation/window/#vscode.window.TextEditor","text":"","title":"TextEditor"},{"location":"documentation/window/#vscode.window.TextEditor.cursor","text":"The cursor position of the 1st selection.","title":"cursor"},{"location":"documentation/window/#vscode.window.TextEditor.delete","text":"Delete a certain text region.","title":"delete()"},{"location":"documentation/window/#vscode.window.TextEditor.insert","text":"Insert text at a location. You can use \\r\\n or \\n in value and they will be normalized to the current document.","title":"insert()"},{"location":"documentation/window/#vscode.window.TextEditor.replace","text":"Replace a certain text region with a new value. You can use \\r\\n or \\n in value and they will be normalized to the current document.","title":"replace()"},{"location":"documentation/window/#vscode.window.set_status_bar_message","text":"Set a message to the status bar. Note that status bar messages stack and that they must be disposed when no longer used. hide_after_timeout: Timeout in seconds after which the message will be auto disposed.","title":"set_status_bar_message()"},{"location":"documentation/window/#vscode.window.show_error_message","text":"Show an error message.","title":"show_error_message()"},{"location":"documentation/window/#vscode.window.show_info_message","text":"Show an information message.","title":"show_info_message()"},{"location":"documentation/window/#vscode.window.show_input_box","text":"Opens an input box to ask the user for input. The returned value will be undefined if the input box was canceled (e.g. pressing ESC). Otherwise the returned value will be the string typed by the user or an empty string if the user did not type anything but dismissed the input box with OK.","title":"show_input_box()"},{"location":"documentation/window/#vscode.window.show_quick_pick","text":"Shows a selection list allowing multiple selections. Returns either the selected items or undefined.","title":"show_quick_pick()"},{"location":"documentation/window/#vscode.window.show_warn_message","text":"Show a warning message.","title":"show_warn_message()"}]}